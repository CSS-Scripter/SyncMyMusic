{
	"info": {
		"_postman_id": "59382b4e-4a1d-4937-89dd-6919adc5449f",
		"name": "SyncMyMusic",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Band",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Requset should not be authorized\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response is not empty\", function() {",
							"    pm.response.to.not.have.body(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hello World\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://145.97.16.181:91/api/users/1/bands",
					"protocol": "http",
					"host": [
						"145",
						"97",
						"16",
						"181"
					],
					"port": "91",
					"path": [
						"api",
						"users",
						"1",
						"bands"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Bands",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Requset should not be authorized\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response is not empty\", function() {",
							"    pm.response.to.not.have.body(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://145.97.16.181:91/api/users/1/bands",
					"protocol": "http",
					"host": [
						"145",
						"97",
						"16",
						"181"
					],
					"port": "91",
					"path": [
						"api",
						"users",
						"1",
						"bands"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Band",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Requset should not be authorized\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response is not empty\", function() {",
							"    pm.response.to.not.have.body(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://145.97.16.181:91/api/bands/3",
					"protocol": "http",
					"host": [
						"145",
						"97",
						"16",
						"181"
					],
					"port": "91",
					"path": [
						"api",
						"bands",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non existing file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"/999/999/doesnotexist.pdf\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "uCcrZxAG",
							"type": "string"
						},
						{
							"key": "username",
							"value": "richardkerkvliet@hotmail.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://145.97.16.181:91/api/files/:bandId/:instrumentId/:filename",
					"protocol": "http",
					"host": [
						"145",
						"97",
						"16",
						"181"
					],
					"port": "91",
					"path": [
						"api",
						"files",
						":bandId",
						":instrumentId",
						":filename"
					],
					"variable": [
						{
							"key": "bandId",
							"value": "999"
						},
						{
							"key": "instrumentId",
							"value": "999"
						},
						{
							"key": "filename",
							"value": "doesnotexist.pdf"
						}
					]
				},
				"description": "try to get a pdf that does not exists, to show that the filepath is created correctly on the server"
			},
			"response": []
		},
		{
			"name": "Get existing file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"/999/999/doesnotexist.pdf\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "uCcrZxAG",
							"type": "string"
						},
						{
							"key": "username",
							"value": "richardkerkvliet@hotmail.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://145.97.16.181:91/api/files/:bandId/:instrumentId/:filename",
					"protocol": "http",
					"host": [
						"145",
						"97",
						"16",
						"181"
					],
					"port": "91",
					"path": [
						"api",
						"files",
						":bandId",
						":instrumentId",
						":filename"
					],
					"variable": [
						{
							"key": "bandId",
							"value": "999"
						},
						{
							"key": "instrumentId",
							"value": "999"
						},
						{
							"key": "filename",
							"value": "doesnotexist.pdf"
						}
					]
				},
				"description": "try to get a pdf that does not exists, to show that the filepath is created correctly on the server"
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}
